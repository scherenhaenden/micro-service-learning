/* DB2 */


/* Test if Database exists and if id does not exists create database named bank*/
IF NOT EXISTS (SELECT * FROM sys.databases WHERE name = 'BANK')

/* Create Bank Customer table with 
CustomerId, 
CustomerToAddressId, 
DateOfSingUp, 
TypeOfCustomer, 
DateOfBirth,
FirstName,
LastName,
PhoneNumber,
Email,
Password,
Passport,
NationalId for DB2
ID should be autoincremented and primary key
*/
CREATE TABLE BANK.CUSTOMER
(
    ID INT NOT NULL GENERATED ALWAYS AS IDENTITY (START WITH 1, INCREMENT BY 1),
    CUSTOMERTOADDRESSID INT NOT NULL,
    DATEOFSINGUP DATE NOT NULL,
    TYPEOFCUSTOMER VARCHAR(50) NOT NULL,
    DATEOFBIRTH DATE NOT NULL,
    FIRSTNAME VARCHAR(50) NOT NULL,
    LASTNAME VARCHAR(50) NOT NULL,
    PHONENUMBER VARCHAR(50) NOT NULL,
    EMAIL VARCHAR(50) NOT NULL,
    PASSWORD VARCHAR(50) NOT NULL,
    PASSPORT VARCHAR(50) NOT NULL,
    NATIONALID VARCHAR(50) NOT NULL,
    PRIMARY KEY (ID)
);


/* Create dummy data for customers  in bank for DB2*/
INSERT INTO BANK.CUSTOMER (CUSTOMERTOADDRESSID, DATEOFSINGUP, TYPEOFCUSTOMER, DATEOFBIRTH, FIRSTNAME, LASTNAME, PHONENUMBER, EMAIL, PASSWORD, PASSPORT, NATIONALID) 
VALUES (1, '2019-01-01', 'Private', '1990-01-01', 'John', 'Doe', '12345678', '', '1234', '12345678', '12345678');
INSERT INTO BANK.CUSTOMER (CUSTOMERTOADDRESSID, DATEOFSINGUP, TYPEOFCUSTOMER, DATEOFBIRTH, FIRSTNAME, LASTNAME, PHONENUMBER, EMAIL, PASSWORD, PASSPORT, NATIONALID)
VALUES (2, '2019-01-01', 'Private', '1990-01-01', 'Jane', 'Doe', '12345678', '', '1234', '12345678', '12345678');
INSERT INTO BANK.CUSTOMER (CUSTOMERTOADDRESSID, DATEOFSINGUP, TYPEOFCUSTOMER, DATEOFBIRTH, FIRSTNAME, LASTNAME, PHONENUMBER, EMAIL, PASSWORD, PASSPORT, NATIONALID)
VALUES (3, '2019-01-01', 'Private', '1990-01-01', 'John', 'Doe', '12345678', '', '1234', '12345678', '12345678');
INSERT INTO BANK.CUSTOMER (CUSTOMERTOADDRESSID, DATEOFSINGUP, TYPEOFCUSTOMER, DATEOFBIRTH, FIRSTNAME, LASTNAME, PHONENUMBER, EMAIL, PASSWORD, PASSPORT, NATIONALID)
VALUES (4, '2019-01-01', 'Private', '1990-01-01', 'Jane', 'Doe', '12345678', '', '1234', '12345678', '12345678');
INSERT INTO BANK.CUSTOMER (CUSTOMERTOADDRESSID, DATEOFSINGUP, TYPEOFCUSTOMER, DATEOFBIRTH, FIRSTNAME, LASTNAME, PHONENUMBER, EMAIL, PASSWORD, PASSPORT, NATIONALID)
VALUES (5, '2019-01-01', 'Private', '1990-01-01', 'John', 'Doe', '12345678', '', '1234', '12345678', '12345678');
INSERT INTO BANK.CUSTOMER (CUSTOMERTOADDRESSID, DATEOFSINGUP, TYPEOFCUSTOMER, DATEOFBIRTH, FIRSTNAME, LASTNAME, PHONENUMBER, EMAIL, PASSWORD, PASSPORT, NATIONALID)
VALUES (6, '2019-01-01', 'Private', '1990-01-01', 'Jane', 'Doe', '12345678', '', '1234', '12345678', '12345678');
INSERT INTO BANK.CUSTOMER (CUSTOMERTOADDRESSID, DATEOFSINGUP, TYPEOFCUSTOMER, DATEOFBIRTH, FIRSTNAME, LASTNAME, PHONENUMBER, EMAIL, PASSWORD, PASSPORT, NATIONALID)
VALUES (7, '2019-01-01', 'Private', '1990-01-01', 'John', 'Doe', '12345678', '', '1234', '12345678', '12345678');
INSERT INTO BANK.CUSTOMER (CUSTOMERTOADDRESSID, DATEOFSINGUP, TYPEOFCUSTOMER, DATEOFBIRTH, FIRSTNAME, LASTNAME, PHONENUMBER, EMAIL, PASSWORD, PASSPORT, NATIONALID)
VALUES (8, '2019-01-01', 'Private', '1990-01-01', 'Jane', 'Doe', '12345678', '', '1234', '12345678', '12345678');
INSERT INTO BANK.CUSTOMER (CUSTOMERTOADDRESSID, DATEOFSINGUP, TYPEOFCUSTOMER, DATEOFBIRTH, FIRSTNAME, LASTNAME, PHONENUMBER, EMAIL, PASSWORD, PASSPORT, NATIONALID)
VALUES (9, '2019-01-01', 'Private', '1990-01-01', 'John', 'Doe', '12345678', '', '1234', '12345678', '12345678');





/* Create Bank Customer table Addresses for database bank*/
CREATE TABLE BANK.ADDRESSES
(
    ID INT NOT NULL GENERATED ALWAYS AS IDENTITY (START WITH 1, INCREMENT BY 1),
    STREET VARCHAR(50) NOT NULL,
    CITY VARCHAR(50) NOT NULL,
    ZIPCODE VARCHAR(50) NOT NULL,
    COUNTRY VARCHAR(50) NOT NULL,
    PRIMARY KEY (ID)
);


/* Create dummy data for addresses for Addresses in bank for DB2*/
INSERT INTO BANK.ADDRESSES (STREET, CITY, ZIPCODE, COUNTRY)
VALUES ('Street 1', 'City 1', '1234', 'Country 1');
INSERT INTO BANK.ADDRESSES (STREET, CITY, ZIPCODE, COUNTRY)
VALUES ('Street 2', 'City 2', '1234', 'Country 2');
INSERT INTO BANK.ADDRESSES (STREET, CITY, ZIPCODE, COUNTRY)
VALUES ('Street 3', 'City 3', '1234', 'Country 3');
INSERT INTO BANK.ADDRESSES (STREET, CITY, ZIPCODE, COUNTRY)
VALUES ('Street 4', 'City 4', '1234', 'Country 4');
INSERT INTO BANK.ADDRESSES (STREET, CITY, ZIPCODE, COUNTRY)
VALUES ('Street 5', 'City 5', '1234', 'Country 5');
INSERT INTO BANK.ADDRESSES (STREET, CITY, ZIPCODE, COUNTRY)
VALUES ('Street 6', 'City 6', '1234', 'Country 6');



/* Create Bank Customer table CustomerToAddressId for DB2*/
CREATE TABLE BANK.CUSTOMERTOADDRESSID
(
    CustomerToAddressId INT NOT NULL GENERATED ALWAYS AS IDENTITY (START WITH 1, INCREMENT BY 1),
    CustomerId INT NOT NULL,
    AddressId INT NOT NULL,
    CONSTRAINT PK_CUSTOMER_TO_ADDRESS_ID PRIMARY KEY (CustomerToAddressId)
);

/* Create dummy data for CustomerToAddressId in bank for DB2*/



INSERT INTO BANK.CUSTOMERTOADDRESSID (CustomerId, AddressId)
VALUES (1, 1);
INSERT INTO BANK.CUSTOMERTOADDRESSID (CustomerId, AddressId)
VALUES (2, 2);
INSERT INTO BANK.CUSTOMERTOADDRESSID (CustomerId, AddressId)
VALUES (3, 3);
INSERT INTO BANK.CUSTOMERTOADDRESSID (CustomerId, AddressId)
VALUES (4, 4);
INSERT INTO BANK.CUSTOMERTOADDRESSID (CustomerId, AddressId)
VALUES (5, 5);
INSERT INTO BANK.CUSTOMERTOADDRESSID (CustomerId, AddressId)
VALUES (6, 1);
INSERT INTO BANK.CUSTOMERTOADDRESSID (CustomerId, AddressId)
VALUES (7, 2);
INSERT INTO BANK.CUSTOMERTOADDRESSID (CustomerId, AddressId)
VALUES (8, 3);
INSERT INTO BANK.CUSTOMERTOADDRESSID (CustomerId, AddressId)
VALUES (9, 4);

/* Create Bank Customer table Accounts*/
CREATE TABLE Accounts
(
    AccountId int NOT NULL,
    AccountType varchar(50) NOT NULL,
    AccountBalance int NOT NULL,
    CONSTRAINT PK_Accounts PRIMARY KEY (AccountId)
);

/* Create dummy data for Accounts*/
INSERT INTO Accounts (AccountId, AccountType, AccountBalance)
VALUES (1, 'Checking', 1000);
INSERT INTO Accounts (AccountId, AccountType, AccountBalance)
VALUES (2, 'Checking', 1000);
INSERT INTO Accounts (AccountId, AccountType, AccountBalance)
VALUES (3, 'Checking', 1000);
INSERT INTO Accounts (AccountId, AccountType, AccountBalance)
VALUES (4, 'Checking', 1000);



/* Create Bank Customer table CustomerToAccountId*/
CREATE TABLE CustomerToAccountId
(
    CustomerToAccountId int NOT NULL,
    CustomerId int NOT NULL,
    AccountId int NOT NULL,
    CONSTRAINT PK_CustomerToAccountId PRIMARY KEY (CustomerToAccountId)
);

/* Create Bank Customer table Transactions*/
CREATE TABLE Transactions
(
    TransactionId int NOT NULL,
    TransactionType varchar(50) NOT NULL,
    TransactionAmount int NOT NULL,
    TransactionDate date NOT NULL,
    TransactionToAccountId int NOT NULL,
    /* add field for TransactionToIban*/
    TransactionToIban varchar(50) NOT NULL,    
    /* add field for TransactionFromIban*/
    TransactionFromIban varchar(50) NOT NULL,    
    CONSTRAINT PK_Transactions PRIMARY KEY (TransactionId)
);

/* Create Bank Customer table TransactionToAccountId*/
CREATE TABLE TransactionToAccountId
(
    TransactionToAccountId int NOT NULL,
    TransactionId int NOT NULL,
    AccountId int NOT NULL,
    CONSTRAINT PK_TransactionToAccountId PRIMARY KEY (TransactionToAccountId)
);

















/* Create all tables needed for a functioning bank*/
/*CREATE TABLE BANK
(
    ACCOUNT_NUMBER INT NOT NULL,
    ACCOUNT_TYPE VARCHAR(20) NOT NULL,
    ACCOUNT_BALANCE INT NOT NULL,
    ACCOUNT_STATUS VARCHAR(20) NOT NULL,
    ACCOUNT_OWNER VARCHAR(20) NOT NULL,
    ACCOUNT_PIN INT NOT NULL,
    ACCOUNT_SSN INT NOT NULL,
    ACCOUNT_ADDRESS VARCHAR(20) NOT NULL,
    ACCOUNT_CITY VARCHAR(20) NOT NULL,
    ACCOUNT_STATE VARCHAR(20) NOT NULL,
    ACCOUNT_ZIP INT NOT NULL,
    ACCOUNT_PHONE INT NOT NULL,
    ACCOUNT_EMAIL VARCHAR(20) NOT NULL,
    ACCOUNT_DOB DATE NOT NULL,
    ACCOUNT_JOINDATE DATE NOT NULL,
    ACCOUNT_LASTLOGIN DATE NOT NULL,
    ACCOUNT_LASTLOGOUT DATE NOT NULL,
    ACCOUNT_LASTTRANSACTION DATE NOT NULL,
    ACCOUNT_LASTTRANSACTIONAMOUNT INT NOT NULL,
    ACCOUNT_LASTTRANSACTIONTYPE VARCHAR(20) NOT NULL,
    ACCOUNT_LASTTRANSACTIONFROM VARCHAR(20) NOT NULL,
    ACCOUNT_LASTTRANSACTIONTO VARCHAR(20) NOT NULL,
    ACCOUNT_LASTTRANSACTIONFROMACCOUNT INT NOT NULL,
    ACCOUNT_LASTTRANSACTIONTOACCOUNT INT NOT NULL,
    ACCOUNT_LASTTRANSACTIONFROMACCOUNTTYPE VARCHAR(20) NOT NULL,
    ACCOUNT_LASTTRANSACTIONTOACCOUNTTYPE VARCHAR(20) NOT NULL,
    ACCOUNT_LASTTRANSACTIONFROMACCOUNTBALANCE INT NOT NULL,
    ACCOUNT_LASTTRANSACTIONTOACCOUNTBALANCE INT NOT NULL,
    ACCOUNT_LASTTRANSACTIONFROMACCOUNTSTATUS VARCHAR(20) NOT NULL,
    ACCOUNT_LASTTRANSACTIONTOACCOUNTSTATUS VARCHAR(20) NOT NULL,
    ACCOUNT_LASTTRANSACTIONFROMACCOUNTOWNER VARCHAR(20) NOT NULL,
    ACCOUNT_LASTTRANSACTIONTOACCOUNTOWNER VARCHAR(20) NOT NULL,
    ACCOUNT_LASTTRANSACTIONFROMACCOUNTPIN INT NOT NULL,
    ACCOUNT_LASTTRANSACTIONTOACCOUNTPIN INT NOT NULL,
    ACCOUNT_LASTTRANSACTIONFROMACCOUNTSSN INT NOT NULL,
    ACCOUNT_LASTTRANSACTIONTOACCOUNTSSN INT NOT NULL,
    ACCOUNT_LASTTRANSACTIONFROMACCOUNTADDRESS VARCHAR(20) NOT NULL,
    ACCOUNT_LASTTRANSACTIONTOACCOUNTADDRESS VARCHAR(20) NOT NULL,
    ACCOUNT_LASTTRANSACTIONFROMACCOUNTCITY VARCHAR(20) NOT NULL,
    ACCOUNT_LASTTRANSACTIONTOACCOUNTCITY VARCHAR(20) NOT NULL,
    ACCOUNT_LASTTRANSACTIONFROMACCOUNTSTATE VARCHAR(20) NOT NULL,
    ACCOUNT_LASTTRANSACTIONTOACCOUNTSTATE VARCHAR(20) NOT NULL,
    ACCOUNT_LASTTRANSACTIONFROM
*/
